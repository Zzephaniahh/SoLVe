(declare-fun L9S0 () Bool)
(declare-fun L9S0$next () Bool)
(define-fun .L9S0 () Bool (! L9S0 :next L9S0$next))
(declare-fun L10S1 () Bool)
(declare-fun L10S1$next () Bool)
(define-fun .L10S1 () Bool (! L10S1 :next L10S1$next))
(declare-fun L11S2 () Bool)
(declare-fun L11S2$next () Bool)
(define-fun .L11S2 () Bool (! L11S2 :next L11S2$next))
(declare-fun L11S3 () Bool)
(declare-fun L11S3$next () Bool)
(define-fun .L11S3 () Bool (! L11S3 :next L11S3$next))
(declare-fun L12S4 () Bool)
(declare-fun L12S4$next () Bool)
(define-fun .L12S4 () Bool (! L12S4 :next L12S4$next))
(declare-fun L13S5 () Bool)
(declare-fun L13S5$next () Bool)
(define-fun .L13S5 () Bool (! L13S5 :next L13S5$next))
(declare-fun L13S6 () Bool)
(declare-fun L13S6$next () Bool)
(define-fun .L13S6 () Bool (! L13S6 :next L13S6$next))
(declare-fun i () (_ BitVec 32))
(declare-fun i$next () (_ BitVec 32))
(define-fun .i () (_ BitVec 32) (! i :next i$next))
(declare-fun main () (_ BitVec 32))
(declare-fun main$next () (_ BitVec 32))
(define-fun .main () (_ BitVec 32) (! main :next main$next))


(define-fun .init () Bool (!
 	(and
		L9S0
		(not L10S1)
		(not L11S2)
		(not L11S3)
		(not L12S4)
		(not L13S5)
		(not L13S6)
	)
	:init true))




(define-fun .trans () Bool (!
 	(and
		(= L9S0$next false)
		(= L10S1$next L9S0)
		(= L11S2$next L10S1)
		(= L11S3$next
		(ite
			(and L11S2 (bvugt i (_ bv0 32)))
			L11S2
			L11S3))
		(= L12S4$next
		(ite
			(and L11S2 (not (bvugt i (_ bv0 32))))
			L11S2
		(ite
			L12S4
			L12S4
			L12S4)))
		(= L13S5$next L11S3)
		(= L13S6$next
		(ite
			L13S5
			L13S5
		(ite
			L13S6
			L13S6
			L13S6)))
		(= i$next
		(ite
		   L10S1
		   (_ bv20 32)
			i))
		(= main$next
		(ite
		   L12S4
		   (_ bv0 32)
			main))
		(= L9S0
			(ite
			L10S1
			false
			L9S0))
		(= L9S0$next
			(ite
			L10S1$next
			false
			L9S0$next))
		(= L10S1
			(ite
			L11S2
			false
			L10S1))
		(= L10S1$next
			(ite
			L11S2$next
			false
			L10S1$next))
		(= L11S2
			(ite
			(or L11S3 L12S4)
			false
			L11S2))
		(= L11S2$next
			(ite
			(or L11S3$next L12S4$next)
			false
			L11S2$next))
		(= L11S3
			(ite
			L13S5
			false
			L11S3))
		(= L11S3$next
			(ite
			L13S5$next
			false
			L11S3$next))


		(= L13S5
			(ite
			L13S6
			false
			L13S5))
		(= L13S5$next
			(ite
			L13S6$next
			false
			L13S5$next))


	)
	:trans true))



(define-fun .property () Bool (!
	(and
	(not
	 L13S6
	))
:invar-property 0))
