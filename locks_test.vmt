(declare-fun L9S0 () Bool)
(declare-fun L9S0$next () Bool)
(define-fun .L9S0 () Bool (! L9S0 :next L9S0$next))
(declare-fun L10S1 () Bool)
(declare-fun L10S1$next () Bool)
(define-fun .L10S1 () Bool (! L10S1 :next L10S1$next))
(declare-fun L12S2 () Bool)
(declare-fun L12S2$next () Bool)
(define-fun .L12S2 () Bool (! L12S2 :next L12S2$next))
(declare-fun L15S3 () Bool)
(declare-fun L15S3$next () Bool)
(define-fun .L15S3 () Bool (! L15S3 :next L15S3$next))
(declare-fun L16S4 () Bool)
(declare-fun L16S4$next () Bool)
(define-fun .L16S4 () Bool (! L16S4 :next L16S4$next))
(declare-fun L16S5 () Bool)
(declare-fun L16S5$next () Bool)
(define-fun .L16S5 () Bool (! L16S5 :next L16S5$next))
(declare-fun L12S6 () Bool)
(declare-fun L12S6$next () Bool)
(define-fun .L12S6 () Bool (! L12S6 :next L12S6$next))
(declare-fun L21S11 () Bool)
(declare-fun L21S11$next () Bool)
(define-fun .L21S11 () Bool (! L21S11 :next L21S11$next))
(declare-fun L12S7 () Bool)
(declare-fun L12S7$next () Bool)
(define-fun .L12S7 () Bool (! L12S7 :next L12S7$next))
(declare-fun L19S8 () Bool)
(declare-fun L19S8$next () Bool)
(define-fun .L19S8 () Bool (! L19S8 :next L19S8$next))
(declare-fun L19S9 () Bool)
(declare-fun L19S9$next () Bool)
(define-fun .L19S9 () Bool (! L19S9 :next L19S9$next))
(declare-fun L20S10 () Bool)
(declare-fun L20S10$next () Bool)
(define-fun .L20S10 () Bool (! L20S10 :next L20S10$next))
(declare-fun L21S12 () Bool)
(declare-fun L21S12$next () Bool)
(define-fun .L21S12 () Bool (! L21S12 :next L21S12$next))
(declare-fun L22S13 () Bool)
(declare-fun L22S13$next () Bool)
(define-fun .L22S13 () Bool (! L22S13 :next L22S13$next))
(declare-fun i () (_ BitVec 32))
(declare-fun i$next () (_ BitVec 32))
(define-fun .i () (_ BitVec 32) (! i :next i$next))
(declare-fun j () (_ BitVec 32))
(declare-fun j$next () (_ BitVec 32))
(define-fun .j () (_ BitVec 32) (! j :next j$next))
(declare-fun main () (_ BitVec 32))
(declare-fun main$next () (_ BitVec 32))
(define-fun .main () (_ BitVec 32) (! main :next main$next))


(define-fun .init () Bool (! 
 	(and
		L9S0
		(not L10S1)
		(not L12S2)
		(not L15S3)
		(not L16S4)
		(not L16S5)
		(not L12S6)
		(not L21S11)
		(not L12S7)
		(not L19S8)
		(not L19S9)
		(not L20S10)
		(not L21S12)
		(not L22S13)
	)
	:init true))




(define-fun .trans () Bool (!  
 	(and
	(= L9S0$next 			false)
	(= L10S1$next 			L9S0)
	(= L12S2$next 
		(or  L10S1  (and L12S6 (bvult i (_ bv9 32)))))
	(= L15S3$next 			L12S2)
	(= L16S4$next 			L15S3)
	(= L16S5$next 
		(or  (and L16S4 (bvugt i (_ bv7 32)))))
	(= L12S6$next 
		(or  (and L16S4 (not (bvugt i (_ bv7 32))))))
	(= L21S11$next 
		(or  L16S5  L19S9 ))
	(= L12S7$next 
		(or  (and L12S6 (not (bvult i (_ bv9 32))))))
	(= L21S12$next 			L21S11)
	(= L19S8$next 			L12S7)
	(= L19S9$next 
		(or  (and L19S8 (bvugt i (_ bv7 32)))))
	(= L20S10$next 
		(or  (and L19S8 (not (bvugt i (_ bv7 32))))))
	(= L22S13$next 			false)
		(= i$next
		(ite
		   L10S1
		   (_ bv0 32)
		   (ite
		      L15S3
		      (bvadd i (_ bv1 32))
			i)))
		(= j$next
		(ite
		   L10S1
		   (_ bv0 32)
			j))
		(= main$next
		(ite
		   L20S10
		   (_ bv0 32)
		   (ite
		      L22S13
		      (_ bv0 32)
			main)))
	) 
	:trans true))


(define-fun one_hot_local () Bool
(and
(=> L10S1  (not L9S0))
(=> L12S2  (not L10S1))
(=> L15S3  (not L12S2))
(=> L16S4  (not L15S3))
(=> (or L16S5 L12S6 ) (not L16S4))
(=> L21S11  (not L16S5))
(=> (or L12S2 L12S7 ) (not L12S6))
(=> L21S12  (not L21S11))
(=> L19S8  (not L12S7))
(=> (or L19S9 L20S10 ) (not L19S8))
(=> L21S11  (not L19S9))
)
)

(define-fun .property () Bool (!
	(and
	(not
	 L21S12
	)) 
:invar-property 0))
