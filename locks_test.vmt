(declare-fun L9S0 () Bool)
(declare-fun L9S0$next () Bool)
(define-fun .L9S0 () Bool (! L9S0 :next L9S0$next))
(declare-fun L10S1 () Bool)
(declare-fun L10S1$next () Bool)
(define-fun .L10S1 () Bool (! L10S1 :next L10S1$next))
(declare-fun L12S2 () Bool)
(declare-fun L12S2$next () Bool)
(define-fun .L12S2 () Bool (! L12S2 :next L12S2$next))
(declare-fun L14S3 () Bool)
(declare-fun L14S3$next () Bool)
(define-fun .L14S3 () Bool (! L14S3 :next L14S3$next))
(declare-fun L14S4 () Bool)
(declare-fun L14S4$next () Bool)
(define-fun .L14S4 () Bool (! L14S4 :next L14S4$next))
(declare-fun L15S5 () Bool)
(declare-fun L15S5$next () Bool)
(define-fun .L15S5 () Bool (! L15S5 :next L15S5$next))
(declare-fun L20S10 () Bool)
(declare-fun L20S10$next () Bool)
(define-fun .L20S10 () Bool (! L20S10 :next L20S10$next))
(declare-fun L15S6 () Bool)
(declare-fun L15S6$next () Bool)
(define-fun .L15S6 () Bool (! L15S6 :next L15S6$next))
(declare-fun WL15S6 () Bool)
(declare-fun WL15S6$next () Bool)
(define-fun .WL15S6 () Bool (! WL15S6 :next WL15S6$next))
(declare-fun RL15S6 () Bool)
(declare-fun RL15S6$next () Bool)
(define-fun .RL15S6 () Bool (! RL15S6 :next RL15S6$next))
(declare-fun L12S7 () Bool)
(declare-fun L12S7$next () Bool)
(define-fun .L12S7 () Bool (! L12S7 :next L12S7$next))
(declare-fun L27S13 () Bool)
(declare-fun L27S13$next () Bool)
(define-fun .L27S13 () Bool (! L27S13 :next L27S13$next))
(declare-fun L29S14 () Bool)
(declare-fun L29S14$next () Bool)
(define-fun .L29S14 () Bool (! L29S14 :next L29S14$next))
(declare-fun L12S8 () Bool)
(declare-fun L12S8$next () Bool)
(define-fun .L12S8 () Bool (! L12S8 :next L12S8$next))
(declare-fun L19S9 () Bool)
(declare-fun L19S9$next () Bool)
(define-fun .L19S9 () Bool (! L19S9 :next L19S9$next))
(declare-fun L20S11 () Bool)
(declare-fun L20S11$next () Bool)
(define-fun .L20S11 () Bool (! L20S11 :next L20S11$next))
(declare-fun L21S12 () Bool)
(declare-fun L21S12$next () Bool)
(define-fun .L21S12 () Bool (! L21S12 :next L21S12$next))
(declare-fun i () (_ BitVec 32))
(declare-fun i$next () (_ BitVec 32))
(define-fun .i () (_ BitVec 32) (! i :next i$next))
(declare-fun j () (_ BitVec 32))
(declare-fun j$next () (_ BitVec 32))
(define-fun .j () (_ BitVec 32) (! j :next j$next))
(declare-fun x () (_ BitVec 32))
(declare-fun x$next () (_ BitVec 32))
(define-fun .x () (_ BitVec 32) (! x :next x$next))
(declare-fun k () (_ BitVec 32))
(declare-fun k$next () (_ BitVec 32))
(define-fun .k () (_ BitVec 32) (! k :next k$next))
(declare-fun addf () (_ BitVec 32))
(declare-fun addf$next () (_ BitVec 32))
(define-fun .addf () (_ BitVec 32) (! addf :next addf$next))
(declare-fun main () (_ BitVec 32))
(declare-fun main$next () (_ BitVec 32))
(define-fun .main () (_ BitVec 32) (! main :next main$next))


(define-fun .init () Bool (! 
 	(and
		L9S0
		(not L10S1)
		(not L12S2)
		(not L14S3)
		(not L14S4)
		(not L15S5)
		(not L20S10)
		(not L15S6)
		(not WL15S6)
		(not RL15S6)
		(not L12S7)
		(not L27S13)
		(not L29S14)
		(not L12S8)
		(not L19S9)
		(not L20S11)
		(not L21S12)
	)
	:init true))




(define-fun trel_equations () Bool (!  
 	(and
	(= L9S0$next 			false)
	(= L10S1$next 			L9S0)
	(= L12S2$next 
		(or  L10S1  (and L12S7 (bvult i (_ bv5 32)))))
	(= L14S3$next 			L12S2)
	(= L14S4$next 
		(or  (and L14S3 (bvugt i (_ bv7 32)))))
	(= L15S5$next 
		(or  (and L14S3 (not (bvugt i (_ bv7 32))))))
	(= L20S10$next 			L14S4)
	(= L15S6$next 			L15S5)
	(= L20S11$next 			L20S10)
	(= WL15S6$next 
		(or  L15S6 (and WL15S6  (not L29S14))))
	(= L27S13$next 			L15S6)
	(= RL15S6$next 
		(or (and WL15S6 L29S14)))
	(= L12S7$next 			RL15S6)
	(= L12S8$next 
		(or  (and L12S7 (not (bvult i (_ bv5 32))))))
	(= L29S14$next 			L27S13)
	(= L19S9$next 			L12S8)
	(= L21S12$next 			false)
		(= i$next
		(ite
		 L9S0 		(_ bv0 32)
		(ite
		 L15S5 		addf
		(ite
		(and WL15S6 L29S14)		addf
			i))))
		(= j$next
		(ite
		 L9S0 		(_ bv0 32)
			j))
		(= x$next
		(ite
		 L15S5 		i
		(ite
		 L15S6 		(bvadd x (_ bv1 32))
			x)))
		(= k$next
		(ite
		 L15S5 		j
		(ite
		 L15S6 		(_ bv2 32)
			k)))
		(= addf$next
		(ite
		 L27S13 		x
			addf))
		(= main$next
		(ite
		 L12S8 		(_ bv0 32)
			main))
	) 
	:trans true))


; GLOBAL one-hot encoding assumptions
(define-fun one_hot_global () Bool
(and
(or (not L9S0) (not L10S1))
(or (not L9S0) (not L12S2))
(or (not L9S0) (not L14S3))
(or (not L9S0) (not L14S4))
(or (not L9S0) (not L15S5))
(or (not L9S0) (not L20S10))
(or (not L9S0) (not L15S6))
(or (not L9S0) (not L12S7))
(or (not L9S0) (not L27S13))
(or (not L9S0) (not L29S14))
(or (not L9S0) (not L12S8))
(or (not L9S0) (not L19S9))
(or (not L9S0) (not L20S11))
(or (not L9S0) (not L21S12))
(or (not L10S1) (not L12S2))
(or (not L10S1) (not L14S3))
(or (not L10S1) (not L14S4))
(or (not L10S1) (not L15S5))
(or (not L10S1) (not L20S10))
(or (not L10S1) (not L15S6))
(or (not L10S1) (not L12S7))
(or (not L10S1) (not L27S13))
(or (not L10S1) (not L29S14))
(or (not L10S1) (not L12S8))
(or (not L10S1) (not L19S9))
(or (not L10S1) (not L20S11))
(or (not L10S1) (not L21S12))
(or (not L12S2) (not L14S3))
(or (not L12S2) (not L14S4))
(or (not L12S2) (not L15S5))
(or (not L12S2) (not L20S10))
(or (not L12S2) (not L15S6))
(or (not L12S2) (not L12S7))
(or (not L12S2) (not L27S13))
(or (not L12S2) (not L29S14))
(or (not L12S2) (not L12S8))
(or (not L12S2) (not L19S9))
(or (not L12S2) (not L20S11))
(or (not L12S2) (not L21S12))
(or (not L14S3) (not L14S4))
(or (not L14S3) (not L15S5))
(or (not L14S3) (not L20S10))
(or (not L14S3) (not L15S6))
(or (not L14S3) (not L12S7))
(or (not L14S3) (not L27S13))
(or (not L14S3) (not L29S14))
(or (not L14S3) (not L12S8))
(or (not L14S3) (not L19S9))
(or (not L14S3) (not L20S11))
(or (not L14S3) (not L21S12))
(or (not L14S4) (not L15S5))
(or (not L14S4) (not L20S10))
(or (not L14S4) (not L15S6))
(or (not L14S4) (not L12S7))
(or (not L14S4) (not L27S13))
(or (not L14S4) (not L29S14))
(or (not L14S4) (not L12S8))
(or (not L14S4) (not L19S9))
(or (not L14S4) (not L20S11))
(or (not L14S4) (not L21S12))
(or (not L15S5) (not L20S10))
(or (not L15S5) (not L15S6))
(or (not L15S5) (not L12S7))
(or (not L15S5) (not L27S13))
(or (not L15S5) (not L29S14))
(or (not L15S5) (not L12S8))
(or (not L15S5) (not L19S9))
(or (not L15S5) (not L20S11))
(or (not L15S5) (not L21S12))
(or (not L20S10) (not L15S6))
(or (not L20S10) (not L12S7))
(or (not L20S10) (not L27S13))
(or (not L20S10) (not L29S14))
(or (not L20S10) (not L12S8))
(or (not L20S10) (not L19S9))
(or (not L20S10) (not L20S11))
(or (not L20S10) (not L21S12))
(or (not L15S6) (not L12S7))
(or (not L15S6) (not L27S13))
(or (not L15S6) (not L29S14))
(or (not L15S6) (not L12S8))
(or (not L15S6) (not L19S9))
(or (not L15S6) (not L20S11))
(or (not L15S6) (not L21S12))
(or (not L12S7) (not L27S13))
(or (not L12S7) (not L29S14))
(or (not L12S7) (not L12S8))
(or (not L12S7) (not L19S9))
(or (not L12S7) (not L20S11))
(or (not L12S7) (not L21S12))
(or (not L27S13) (not L29S14))
(or (not L27S13) (not L12S8))
(or (not L27S13) (not L19S9))
(or (not L27S13) (not L20S11))
(or (not L27S13) (not L21S12))
(or (not L29S14) (not L12S8))
(or (not L29S14) (not L19S9))
(or (not L29S14) (not L20S11))
(or (not L29S14) (not L21S12))
(or (not L12S8) (not L19S9))
(or (not L12S8) (not L20S11))
(or (not L12S8) (not L21S12))
(or (not L19S9) (not L20S11))
(or (not L19S9) (not L21S12))
(or (not L20S11) (not L21S12))
)
)
; GLOBAL one-hot encoding assumptions
(define-fun one_hot_global$next () Bool
(and
(or (not L9S0$next) (not L10S1$next))
(or (not L9S0$next) (not L12S2$next))
(or (not L9S0$next) (not L14S3$next))
(or (not L9S0$next) (not L14S4$next))
(or (not L9S0$next) (not L15S5$next))
(or (not L9S0$next) (not L20S10$next))
(or (not L9S0$next) (not L15S6$next))
(or (not L9S0$next) (not L12S7$next))
(or (not L9S0$next) (not L27S13$next))
(or (not L9S0$next) (not L29S14$next))
(or (not L9S0$next) (not L12S8$next))
(or (not L9S0$next) (not L19S9$next))
(or (not L9S0$next) (not L20S11$next))
(or (not L9S0$next) (not L21S12$next))
(or (not L10S1$next) (not L12S2$next))
(or (not L10S1$next) (not L14S3$next))
(or (not L10S1$next) (not L14S4$next))
(or (not L10S1$next) (not L15S5$next))
(or (not L10S1$next) (not L20S10$next))
(or (not L10S1$next) (not L15S6$next))
(or (not L10S1$next) (not L12S7$next))
(or (not L10S1$next) (not L27S13$next))
(or (not L10S1$next) (not L29S14$next))
(or (not L10S1$next) (not L12S8$next))
(or (not L10S1$next) (not L19S9$next))
(or (not L10S1$next) (not L20S11$next))
(or (not L10S1$next) (not L21S12$next))
(or (not L12S2$next) (not L14S3$next))
(or (not L12S2$next) (not L14S4$next))
(or (not L12S2$next) (not L15S5$next))
(or (not L12S2$next) (not L20S10$next))
(or (not L12S2$next) (not L15S6$next))
(or (not L12S2$next) (not L12S7$next))
(or (not L12S2$next) (not L27S13$next))
(or (not L12S2$next) (not L29S14$next))
(or (not L12S2$next) (not L12S8$next))
(or (not L12S2$next) (not L19S9$next))
(or (not L12S2$next) (not L20S11$next))
(or (not L12S2$next) (not L21S12$next))
(or (not L14S3$next) (not L14S4$next))
(or (not L14S3$next) (not L15S5$next))
(or (not L14S3$next) (not L20S10$next))
(or (not L14S3$next) (not L15S6$next))
(or (not L14S3$next) (not L12S7$next))
(or (not L14S3$next) (not L27S13$next))
(or (not L14S3$next) (not L29S14$next))
(or (not L14S3$next) (not L12S8$next))
(or (not L14S3$next) (not L19S9$next))
(or (not L14S3$next) (not L20S11$next))
(or (not L14S3$next) (not L21S12$next))
(or (not L14S4$next) (not L15S5$next))
(or (not L14S4$next) (not L20S10$next))
(or (not L14S4$next) (not L15S6$next))
(or (not L14S4$next) (not L12S7$next))
(or (not L14S4$next) (not L27S13$next))
(or (not L14S4$next) (not L29S14$next))
(or (not L14S4$next) (not L12S8$next))
(or (not L14S4$next) (not L19S9$next))
(or (not L14S4$next) (not L20S11$next))
(or (not L14S4$next) (not L21S12$next))
(or (not L15S5$next) (not L20S10$next))
(or (not L15S5$next) (not L15S6$next))
(or (not L15S5$next) (not L12S7$next))
(or (not L15S5$next) (not L27S13$next))
(or (not L15S5$next) (not L29S14$next))
(or (not L15S5$next) (not L12S8$next))
(or (not L15S5$next) (not L19S9$next))
(or (not L15S5$next) (not L20S11$next))
(or (not L15S5$next) (not L21S12$next))
(or (not L20S10$next) (not L15S6$next))
(or (not L20S10$next) (not L12S7$next))
(or (not L20S10$next) (not L27S13$next))
(or (not L20S10$next) (not L29S14$next))
(or (not L20S10$next) (not L12S8$next))
(or (not L20S10$next) (not L19S9$next))
(or (not L20S10$next) (not L20S11$next))
(or (not L20S10$next) (not L21S12$next))
(or (not L15S6$next) (not L12S7$next))
(or (not L15S6$next) (not L27S13$next))
(or (not L15S6$next) (not L29S14$next))
(or (not L15S6$next) (not L12S8$next))
(or (not L15S6$next) (not L19S9$next))
(or (not L15S6$next) (not L20S11$next))
(or (not L15S6$next) (not L21S12$next))
(or (not L12S7$next) (not L27S13$next))
(or (not L12S7$next) (not L29S14$next))
(or (not L12S7$next) (not L12S8$next))
(or (not L12S7$next) (not L19S9$next))
(or (not L12S7$next) (not L20S11$next))
(or (not L12S7$next) (not L21S12$next))
(or (not L27S13$next) (not L29S14$next))
(or (not L27S13$next) (not L12S8$next))
(or (not L27S13$next) (not L19S9$next))
(or (not L27S13$next) (not L20S11$next))
(or (not L27S13$next) (not L21S12$next))
(or (not L29S14$next) (not L12S8$next))
(or (not L29S14$next) (not L19S9$next))
(or (not L29S14$next) (not L20S11$next))
(or (not L29S14$next) (not L21S12$next))
(or (not L12S8$next) (not L19S9$next))
(or (not L12S8$next) (not L20S11$next))
(or (not L12S8$next) (not L21S12$next))
(or (not L19S9$next) (not L20S11$next))
(or (not L19S9$next) (not L21S12$next))
(or (not L20S11$next) (not L21S12$next))
)
)
; With GLOBAL one-hotness the combined formula is:
(define-fun .trans () Bool (! 
(and 
trel_equations 
one_hot_global
one_hot_global$next
) 
:trans true))

(define-fun .property () Bool (!
	(and
	(not
	 L20S11
	)) 
:invar-property 0))
