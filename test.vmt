(declare-fun L9S0 () Bool)
(declare-fun L9S0$next () Bool)
(define-fun .L9S0 () Bool (! L9S0 :next L9S0$next))
(declare-fun L10S1 () Bool)
(declare-fun L10S1$next () Bool)
(define-fun .L10S1 () Bool (! L10S1 :next L10S1$next))
(declare-fun L12S2 () Bool)
(declare-fun L12S2$next () Bool)
(define-fun .L12S2 () Bool (! L12S2 :next L12S2$next))
(declare-fun L14S3 () Bool)
(declare-fun L14S3$next () Bool)
(define-fun .L14S3 () Bool (! L14S3 :next L14S3$next))
(declare-fun L14S4 () Bool)
(declare-fun L14S4$next () Bool)
(define-fun .L14S4 () Bool (! L14S4 :next L14S4$next))
(declare-fun WL14S4 () Bool)
(declare-fun WL14S4$next () Bool)
(define-fun .WL14S4 () Bool (! WL14S4 :next WL14S4$next))
(declare-fun RL14S4 () Bool)
(declare-fun RL14S4$next () Bool)
(define-fun .RL14S4 () Bool (! RL14S4 :next RL14S4$next))
(declare-fun L16S5 () Bool)
(declare-fun L16S5$next () Bool)
(define-fun .L16S5 () Bool (! L16S5 :next L16S5$next))
(declare-fun L27S15 () Bool)
(declare-fun L27S15$next () Bool)
(define-fun .L27S15 () Bool (! L27S15 :next L27S15$next))
(declare-fun L29S16 () Bool)
(declare-fun L29S16$next () Bool)
(define-fun .L29S16 () Bool (! L29S16 :next L29S16$next))
(declare-fun L16S6 () Bool)
(declare-fun L16S6$next () Bool)
(define-fun .L16S6 () Bool (! L16S6 :next L16S6$next))
(declare-fun L12S7 () Bool)
(declare-fun L12S7$next () Bool)
(define-fun .L12S7 () Bool (! L12S7 :next L12S7$next))
(declare-fun L21S12 () Bool)
(declare-fun L21S12$next () Bool)
(define-fun .L21S12 () Bool (! L21S12 :next L21S12$next))
(declare-fun L12S8 () Bool)
(declare-fun L12S8$next () Bool)
(define-fun .L12S8 () Bool (! L12S8 :next L12S8$next))
(declare-fun L19S9 () Bool)
(declare-fun L19S9$next () Bool)
(define-fun .L19S9 () Bool (! L19S9 :next L19S9$next))
(declare-fun L19S10 () Bool)
(declare-fun L19S10$next () Bool)
(define-fun .L19S10 () Bool (! L19S10 :next L19S10$next))
(declare-fun L20S11 () Bool)
(declare-fun L20S11$next () Bool)
(define-fun .L20S11 () Bool (! L20S11 :next L20S11$next))
(declare-fun L21S13 () Bool)
(declare-fun L21S13$next () Bool)
(define-fun .L21S13 () Bool (! L21S13 :next L21S13$next))
(declare-fun L22S14 () Bool)
(declare-fun L22S14$next () Bool)
(define-fun .L22S14 () Bool (! L22S14 :next L22S14$next))
(declare-fun i () (_ BitVec 32))
(declare-fun i$next () (_ BitVec 32))
(define-fun .i () (_ BitVec 32) (! i :next i$next))
(declare-fun j () (_ BitVec 32))
(declare-fun j$next () (_ BitVec 32))
(define-fun .j () (_ BitVec 32) (! j :next j$next))
(declare-fun x () (_ BitVec 32))
(declare-fun x$next () (_ BitVec 32))
(define-fun .x () (_ BitVec 32) (! x :next x$next))
(declare-fun k () (_ BitVec 32))
(declare-fun k$next () (_ BitVec 32))
(define-fun .k () (_ BitVec 32) (! k :next k$next))
(declare-fun addf () (_ BitVec 32))
(declare-fun addf$next () (_ BitVec 32))
(define-fun .addf () (_ BitVec 32) (! addf :next addf$next))
(declare-fun main () (_ BitVec 32))
(declare-fun main$next () (_ BitVec 32))
(define-fun .main () (_ BitVec 32) (! main :next main$next))


(define-fun .init () Bool (!
 	(and
		L9S0
		(not L10S1)
		(not L12S2)
		(not L14S3)
		(not L14S4)
		(not WL14S4)
		(not RL14S4)
		(not L16S5)
		(not L27S15)
		(not L29S16)
		(not L16S6)
		(not L12S7)
		(not L21S12)
		(not L12S8)
		(not L19S9)
		(not L19S10)
		(not L20S11)
		(not L21S13)
		(not L22S14)
	)
	:init true))




(define-fun .trans () Bool (!
 	(and
	(= L9S0$next
		(ite
			L10S1$next
			false
			false))
	(= L10S1$next
		(ite
			L12S2$next
			false
			L9S0))
	(= L12S2$next
		(ite
			L14S3$next
			false
		(ite
			L10S1
			L10S1
		(ite
			(and L12S7 (bvult i (_ bv9 32)))
			L12S7
			L12S2))))
	(= L14S3$next
		(ite
			L14S4$next
			false
			L12S2))
	(= L14S4$next
		(ite
			(or L16S5$next L27S15$next)
			false
			L14S3))
	(= WL14S4$next
		(ite
			RL14S4$next
			false
		(ite
			L14S4
			L14S4
			WL14S4)))
	(= L27S15$next
		(ite
			L29S16$next
			false
			L14S4))
	(= RL14S4$next
		(ite
			L16S5$next
			false
    (ite
    (and L29S16 WL14S4)
    true
			RL14S4)))
	(= L16S5$next
		(ite
			(or L16S6$next L12S7$next)
			false
			RL14S4))
	(= L16S6$next
		(ite
			L21S12$next
			false
		(ite
			(and L16S5 (bvugt i (_ bv7 32)))
			L16S5
			L16S6)))
	(= L12S7$next
		(ite
			(or L12S2$next L12S8$next)
			false
		(ite
			(and L16S5 (not (bvugt i (_ bv7 32))))
			L16S5
			L12S7)))
	(= L27S15$next
		(ite
			L29S16$next
			false
    (ite
    L14S4
    L14S4
			L27S15)))
	(= L29S16$next
  (ite
			L27S15
			L27S15
		(ite
			L29S16
			false
			L29S16)))
	(= L21S12$next
		(ite
			L21S13$next
			false
		(ite
			L16S6
			L16S6
		(ite
			L19S10
			L19S10
			L21S12))))
	(= L12S8$next
		(ite
			L19S9$next
			false
		(ite
			(and L12S7 (not (bvult i (_ bv9 32))))
			L12S7
			L12S8)))
	(= L21S13$next 		(ite
			L21S12
			L21S12
		(ite
			L21S13
			L21S13
			L21S13)))
	(= L19S9$next
		(ite
			(or L19S10$next L20S11$next)
			false
			L12S8))
	(= L19S10$next
		(ite
			L21S12$next
			false
		(ite
			(and L19S9 (bvugt i (_ bv7 32)))
			L19S9
			L19S10)))
	(= L20S11$next 		(ite
			(and L19S9 (not (bvugt i (_ bv7 32))))
			L19S9
		(ite
			L20S11
			L20S11
			L20S11)))
	(= L22S14$next 			L22S14)
		(= i$next
		(ite
		   L10S1
		   (_ bv0 32)
		      (ite
		         RL14S4
		         addf
			i)))
		(= j$next
		(ite
		   L10S1
		   (_ bv0 32)
			j))
		(= x$next
		(ite
		   L14S4
		   i
		   (ite
		      L27S15
		      (bvadd x (_ bv1 32))
			x)))
		(= k$next
		(ite
		   L14S4
		   j
		   (ite
		      L27S15
		      (_ bv2 32)
			k)))
		(= addf$next
		(ite
		   L29S16
		   x
			addf))
		(= main$next
		(ite
		   L20S11
		   (_ bv0 32)
		   (ite
		      L22S14
		      (_ bv0 32)
			main)))
	)
	:trans true))



(define-fun .property () Bool (!
	(and
	(not
	 L21S13
	))
:invar-property 0))
