(declare-fun L8S0 () Bool)
(declare-fun L8S0$next () Bool)
(define-fun .L8S0 () Bool (! L8S0 :next L8S0$next))
(declare-fun L9S1 () Bool)
(declare-fun L9S1$next () Bool)
(define-fun .L9S1 () Bool (! L9S1 :next L9S1$next))
(declare-fun L10S2 () Bool)
(declare-fun L10S2$next () Bool)
(define-fun .L10S2 () Bool (! L10S2 :next L10S2$next))
(declare-fun L12S3 () Bool)
(declare-fun L12S3$next () Bool)
(define-fun .L12S3 () Bool (! L12S3 :next L12S3$next))
(declare-fun L12S4 () Bool)
(declare-fun L12S4$next () Bool)
(define-fun .L12S4 () Bool (! L12S4 :next L12S4$next))
(declare-fun L13S5 () Bool)
(declare-fun L13S5$next () Bool)
(define-fun .L13S5 () Bool (! L13S5 :next L13S5$next))
(declare-fun L17S9 () Bool)
(declare-fun L17S9$next () Bool)
(define-fun .L17S9 () Bool (! L17S9 :next L17S9$next))
(declare-fun L10S6 () Bool)
(declare-fun L10S6$next () Bool)
(define-fun .L10S6 () Bool (! L10S6 :next L10S6$next))
(declare-fun L10S7 () Bool)
(declare-fun L10S7$next () Bool)
(define-fun .L10S7 () Bool (! L10S7 :next L10S7$next))
(declare-fun L16S8 () Bool)
(declare-fun L16S8$next () Bool)
(define-fun .L16S8 () Bool (! L16S8 :next L16S8$next))
(declare-fun L17S10 () Bool)
(declare-fun L17S10$next () Bool)
(define-fun .L17S10 () Bool (! L17S10 :next L17S10$next))
(declare-fun L18S11 () Bool)
(declare-fun L18S11$next () Bool)
(define-fun .L18S11 () Bool (! L18S11 :next L18S11$next))
(declare-fun i () (_ BitVec 32))
(declare-fun i$next () (_ BitVec 32))
(define-fun .i () (_ BitVec 32) (! i :next i$next))
(declare-fun main () (_ BitVec 32))
(declare-fun main$next () (_ BitVec 32))
(define-fun .main () (_ BitVec 32) (! main :next main$next))


(define-fun .init () Bool (!
 	(and
		L8S0
		(not L9S1)
		(not L10S2)
		(not L12S3)
		(not L12S4)
		(not L13S5)
		(not L17S9)
		(not L10S6)
		(not L10S7)
		(not L16S8)
		(not L17S10)
		(not L18S11)
	)
	:init true))




(define-fun trel_equations () Bool (!
 	(and
	(= L8S0$next 			false)
	(= L9S1$next 			L8S0)
	(= L10S2$next
		(or  L9S1  (and L10S6 (bvult i (_ bv5 32)))))
	(= L12S3$next 			L10S2)
	(= L12S4$next
		(or  (and L12S3 (bvugt i (_ bv7 32)))))
	(= L13S5$next
		(or  (and L12S3 (not (bvugt i (_ bv7 32))))))
	(= L17S9$next 			L12S4)
	(= L10S6$next 			L13S5)
	(= L17S10$next 			L17S9)
	(= L10S7$next
		(or  (and L10S6 (not (bvult i (_ bv5 32))))))
	(= L16S8$next 			L10S7)
	(= L18S11$next 			false)
		(= i$next
		(ite
		 L8S0 		(_ bv0 32)
		(ite
		 (and L12S3 (not (bvugt i (_ bv7 32))))		(bvadd i (_ bv2 32))
			i)))
		(= main$next
		(ite
		 L10S7 		(_ bv0 32)
			main))
	)
	:trans true))


; GLOBAL one-hot encoding assumptions
(define-fun one_hot_global () Bool
(and
(or (not L8S0) (not L9S1))
(or (not L8S0) (not L10S2))
(or (not L8S0) (not L12S3))
(or (not L8S0) (not L12S4))
(or (not L8S0) (not L13S5))
(or (not L8S0) (not L17S9))
(or (not L8S0) (not L10S6))
(or (not L8S0) (not L10S7))
(or (not L8S0) (not L16S8))
(or (not L8S0) (not L17S10))
(or (not L8S0) (not L18S11))
(or (not L9S1) (not L10S2))
(or (not L9S1) (not L12S3))
(or (not L9S1) (not L12S4))
(or (not L9S1) (not L13S5))
(or (not L9S1) (not L17S9))
(or (not L9S1) (not L10S6))
(or (not L9S1) (not L10S7))
(or (not L9S1) (not L16S8))
(or (not L9S1) (not L17S10))
(or (not L9S1) (not L18S11))
(or (not L10S2) (not L12S3))
(or (not L10S2) (not L12S4))
(or (not L10S2) (not L13S5))
(or (not L10S2) (not L17S9))
(or (not L10S2) (not L10S6))
(or (not L10S2) (not L10S7))
(or (not L10S2) (not L16S8))
(or (not L10S2) (not L17S10))
(or (not L10S2) (not L18S11))
(or (not L12S3) (not L12S4))
(or (not L12S3) (not L13S5))
(or (not L12S3) (not L17S9))
(or (not L12S3) (not L10S6))
(or (not L12S3) (not L10S7))
(or (not L12S3) (not L16S8))
(or (not L12S3) (not L17S10))
(or (not L12S3) (not L18S11))
(or (not L12S4) (not L13S5))
(or (not L12S4) (not L17S9))
(or (not L12S4) (not L10S6))
(or (not L12S4) (not L10S7))
(or (not L12S4) (not L16S8))
(or (not L12S4) (not L17S10))
(or (not L12S4) (not L18S11))
(or (not L13S5) (not L17S9))
(or (not L13S5) (not L10S6))
(or (not L13S5) (not L10S7))
(or (not L13S5) (not L16S8))
(or (not L13S5) (not L17S10))
(or (not L13S5) (not L18S11))
(or (not L17S9) (not L10S6))
(or (not L17S9) (not L10S7))
(or (not L17S9) (not L16S8))
(or (not L17S9) (not L17S10))
(or (not L17S9) (not L18S11))
(or (not L10S6) (not L10S7))
(or (not L10S6) (not L16S8))
(or (not L10S6) (not L17S10))
(or (not L10S6) (not L18S11))
(or (not L10S7) (not L16S8))
(or (not L10S7) (not L17S10))
(or (not L10S7) (not L18S11))
(or (not L16S8) (not L17S10))
(or (not L16S8) (not L18S11))
(or (not L17S10) (not L18S11))
)
)
; GLOBAL one-hot encoding assumptions
(define-fun one_hot_global$next () Bool
(and
(or (not L8S0$next) (not L9S1$next))
(or (not L8S0$next) (not L10S2$next))
(or (not L8S0$next) (not L12S3$next))
(or (not L8S0$next) (not L12S4$next))
(or (not L8S0$next) (not L13S5$next))
(or (not L8S0$next) (not L17S9$next))
(or (not L8S0$next) (not L10S6$next))
(or (not L8S0$next) (not L10S7$next))
(or (not L8S0$next) (not L16S8$next))
(or (not L8S0$next) (not L17S10$next))
(or (not L8S0$next) (not L18S11$next))
(or (not L9S1$next) (not L10S2$next))
(or (not L9S1$next) (not L12S3$next))
(or (not L9S1$next) (not L12S4$next))
(or (not L9S1$next) (not L13S5$next))
(or (not L9S1$next) (not L17S9$next))
(or (not L9S1$next) (not L10S6$next))
(or (not L9S1$next) (not L10S7$next))
(or (not L9S1$next) (not L16S8$next))
(or (not L9S1$next) (not L17S10$next))
(or (not L9S1$next) (not L18S11$next))
(or (not L10S2$next) (not L12S3$next))
(or (not L10S2$next) (not L12S4$next))
(or (not L10S2$next) (not L13S5$next))
(or (not L10S2$next) (not L17S9$next))
(or (not L10S2$next) (not L10S6$next))
(or (not L10S2$next) (not L10S7$next))
(or (not L10S2$next) (not L16S8$next))
(or (not L10S2$next) (not L17S10$next))
(or (not L10S2$next) (not L18S11$next))
(or (not L12S3$next) (not L12S4$next))
(or (not L12S3$next) (not L13S5$next))
(or (not L12S3$next) (not L17S9$next))
(or (not L12S3$next) (not L10S6$next))
(or (not L12S3$next) (not L10S7$next))
(or (not L12S3$next) (not L16S8$next))
(or (not L12S3$next) (not L17S10$next))
(or (not L12S3$next) (not L18S11$next))
(or (not L12S4$next) (not L13S5$next))
(or (not L12S4$next) (not L17S9$next))
(or (not L12S4$next) (not L10S6$next))
(or (not L12S4$next) (not L10S7$next))
(or (not L12S4$next) (not L16S8$next))
(or (not L12S4$next) (not L17S10$next))
(or (not L12S4$next) (not L18S11$next))
(or (not L13S5$next) (not L17S9$next))
(or (not L13S5$next) (not L10S6$next))
(or (not L13S5$next) (not L10S7$next))
(or (not L13S5$next) (not L16S8$next))
(or (not L13S5$next) (not L17S10$next))
(or (not L13S5$next) (not L18S11$next))
(or (not L17S9$next) (not L10S6$next))
(or (not L17S9$next) (not L10S7$next))
(or (not L17S9$next) (not L16S8$next))
(or (not L17S9$next) (not L17S10$next))
(or (not L17S9$next) (not L18S11$next))
(or (not L10S6$next) (not L10S7$next))
(or (not L10S6$next) (not L16S8$next))
(or (not L10S6$next) (not L17S10$next))
(or (not L10S6$next) (not L18S11$next))
(or (not L10S7$next) (not L16S8$next))
(or (not L10S7$next) (not L17S10$next))
(or (not L10S7$next) (not L18S11$next))
(or (not L16S8$next) (not L17S10$next))
(or (not L16S8$next) (not L18S11$next))
(or (not L17S10$next) (not L18S11$next))
)
)
; With GLOBAL one-hotness the combined formula is:
(define-fun .trans () Bool (!
(and
trel_equations
one_hot_global
one_hot_global$next
)
:trans true))

(define-fun .property () Bool (!
	(not
	(and
	 L17S10
	 L17S9
	 L12S4
	))
:invar-property 0))
