(declare-fun L1 () Bool)
(declare-fun L1n () Bool)
(define-fun .L1rel () Int (! L1 :next L1n))
(define-fun .L1init () Bool (! (= L1 1) :L1init true))
(define-fun .L1trans () Bool (! (= L1n (0)) :L1trans true))
(declare-fun L2 () Bool)
(declare-fun L2n () Bool)
(define-fun .L2rel () Int (! L2 :next L2n))
(define-fun .L2init () Bool (! L2 0) :L2init true))
(define-fun .L2trans () Bool (! L2n (L1)) :L2trans True))
(declare-fun L3 () Bool)
(declare-fun L3n () Bool)
(define-fun .L3rel () Int (! L3 :next L3n))
(define-fun .L3init () Bool (! L3 0) :L3init true))
(define-fun .L3trans () Bool (! L3n (L2)) :L3trans True))
(declare-fun L4 () Bool)
(declare-fun L4n () Bool)
(define-fun .L4rel () Int (! L4 :next L4n))
(define-fun .L4init () Bool (! L4 0) :L4init true))
(define-fun .L4trans () Bool (! L4n (L3)) :L4trans True))
(declare-fun L2 () Bool)
(declare-fun L2n () Bool)
(define-fun .L2rel () Int (! L2 :next L2n))
(define-fun .L2init () Bool (! L2 0) :L2init true))
(define-fun .L2trans () Bool (! L2n (L4)) :L2trans i < 7))
(declare-fun L5 () Bool)
(declare-fun L5n () Bool)
(define-fun .L5rel () Int (! L5 :next L5n))
(define-fun .L5init () Bool (! L5 0) :L5init true))
(define-fun .L5trans () Bool (! L5n (L4)) :L5trans !i < 7))
(declare-fun L6 () Bool)
(declare-fun L6n () Bool)
(define-fun .L6rel () Int (! L6 :next L6n))
(define-fun .L6init () Bool (! L6 0) :L6init true))
(define-fun .L6trans () Bool (! L6n (L5)) :L6trans True))
