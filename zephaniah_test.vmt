(declare-fun L1 () Bool)
(declare-fun L1$next () Bool)
(define-fun .L1 () Bool (! L1 :next L1$next))
(declare-fun L2 () Bool)
(declare-fun L2$next () Bool)
(define-fun .L2 () Bool (! L2 :next L2$next))
(declare-fun L7 () Bool)
(declare-fun L7$next () Bool)
(define-fun .L7 () Bool (! L7 :next L7$next))
(declare-fun L8 () Bool)
(declare-fun L8$next () Bool)
(define-fun .L8 () Bool (! L8 :next L8$next))
(declare-fun L9 () Bool)
(declare-fun L9$next () Bool)
(define-fun .L9 () Bool (! L9 :next L9$next))
(declare-fun L10 () Bool)
(declare-fun L10$next () Bool)
(define-fun .L10 () Bool (! L10 :next L10$next))
(declare-fun L11 () Bool)
(declare-fun L11$next () Bool)
(define-fun .L11 () Bool (! L11 :next L11$next))
(declare-fun L12 () Bool)
(declare-fun L12$next () Bool)
(define-fun .L12 () Bool (! L12 :next L12$next))
(declare-fun y () (_ BitVec 32))
(declare-fun y$next () (_ BitVec 32))
(define-fun .y () (_ BitVec 32) (! y :next y$next))
(declare-fun x () (_ BitVec 32))
(declare-fun x$next () (_ BitVec 32))
(define-fun .x () (_ BitVec 32) (! x :next x$next))
(declare-fun z () (_ BitVec 32))
(declare-fun z$next () (_ BitVec 32))
(define-fun .z () (_ BitVec 32) (! z :next z$next))
(declare-fun main () (_ BitVec 32))
(declare-fun main$next () (_ BitVec 32))
(define-fun .main () (_ BitVec 32) (! main :next main$next))


(define-fun .init () Bool (! 
 	(and
		L1
		(not L2)
		(not L7)
		(not L8)
		(not L9)
		(not L10)
		(not L11)
		(not L12)
	)
	:init true))




(define-fun .trans () Bool (!  
 	(and
		(= L2$next L1)
		(= L7$next L2)
		(= L8$next L7)
		(= L9$next L8)
		(= L10$next 
		(ite
			(and L9 (bvult x (_ bv0 32)))
			L9
			L10))
		(= L11$next 
		(ite
			(and L9 (bvult x (_ bv0 32)))
			L9
		(ite
			L10
			L10
			L11)))
		(= L12$next 		(ite
			L11
			L11
		(ite
			L12
			L12
			L12)))
		(= y$next
		(ite
		   L2
		   (_ bv0 32)
			y))
		(= x$next
		(ite
		   L7
		   (_ bv0 32)
			x))
		(= z$next
		(ite
		   L8
		   (_ bv0 32)
		   (ite
		      L10
		      (bvadd x (_ bv1 32))
		      (ite
		         L11
		         (_ bv7 32)
			z))))
		(= main$next
		(ite
		   L12
		   (_ bv0 32)
			main))
		(= L1
			(ite
			L2
			false
			L1))
		(= L2
			(ite
			L7
			false
			L2))
		(= L7
			(ite
			L8
			false
			L7))
		(= L8
			(ite
			L9
			false
			L8))
		(= L9
			(ite
			(or L10 L11)
			false
			L9))
		(= L10
			(ite
			L11
			false
			L10))
		(= L11
			(ite
			L12
			false
			L11))

	) 
	:trans true))



(define-fun .property () Bool (!
	(and
		(not (= z (_ bv9 32)))
)
:invar-property 0))
